import React, { useEffect, useState } from "react";
import {
  Table,
  Button,
  Badge,
  Dropdown,
  Row,
  Col,
  Card,
} from "react-bootstrap";
import { useNavigate } from "react-router-dom";
import { toast } from "react-toastify";
import { getAllOrders, updateOrderStatus } from "../../api/orderApi";
import "../Layout.scss";
import Loading from "../../components/Loading/Loading";

const OrderManage = () => {
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);
  const [orders, setOrders] = useState([]);

  const statusMap = {
    pending: { label: "Ch·ªù x·ª≠ l√Ω", variant: "warning" },
    confirmed: { label: "ƒê√£ x√°c nh·∫≠n", variant: "info" },
    processing: { label: "ƒêang x·ª≠ l√Ω", variant: "primary" },
    shipped: { label: "ƒêang giao", variant: "primary" },
    delivered: { label: "ƒê√£ giao", variant: "success" },
    cancelled: { label: "ƒê√£ h·ªßy", variant: "danger" },
  };

  const returnStatusMap = {
    none: { label: "Kh√¥ng tr·∫£", variant: "secondary" },
    requested: { label: "ƒê√£ y√™u c·∫ßu", variant: "warning" },
    approved: { label: "ƒê∆∞·ª£c duy·ªát", variant: "success" },
    rejected: { label: "B·ªã t·ª´ ch·ªëi", variant: "danger" },
    completed: { label: "Ho√†n t·∫•t", variant: "primary" },
  };

  const getStatusBadge = (status) => {
    const info = statusMap[status] || { label: status, variant: "secondary" };
    return <Badge bg={info.variant}>{info.label}</Badge>;
  };

  const getReturnBadge = (status) => {
    const info = returnStatusMap[status] || {
      label: status,
      variant: "secondary",
    };
    return <Badge bg={info.variant}>{info.label}</Badge>;
  };

  const fetchOrders = async () => {
    try {
      setLoading(true);
      const res = await getAllOrders();
      if (res?.errCode === 0) setOrders(res.data);
      else toast.error(res?.errMessage || "Kh√¥ng th·ªÉ t·∫£i ƒë∆°n h√†ng");
    } catch (err) {
      console.error(err);
      toast.error("L·ªói t·∫£i danh s√°ch ƒë∆°n h√†ng");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchOrders();
  }, []);

  const handleUpdateStatus = async (orderId, status) => {
    try {
      setLoading(true);
      const res = await updateOrderStatus(orderId, status);
      if (res?.errCode === 0)
        toast.success(`C·∫≠p nh·∫≠t th√†nh c√¥ng: ${statusMap[status]?.label}`);
      else toast.error(res?.errMessage || "C·∫≠p nh·∫≠t th·∫•t b·∫°i");
      fetchOrders();
    } catch (err) {
      console.error(err);
      toast.error("L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i");
    } finally {
      setLoading(false);
    }
  };

  const handleReceiveOrder = (orderId) =>
    handleUpdateStatus(orderId, "delivered");

  const formatCurrency = (value) =>
    parseFloat(value).toLocaleString("vi-VN") + " ‚Ç´";
  const formatDate = (dateStr) => new Date(dateStr).toLocaleDateString("vi-VN");

  return (
    <>
      {loading && <Loading />}
      <div>
        <h3 className="mb-4">üì¶ Qu·∫£n l√Ω ƒë∆°n h√†ng</h3>

        <Card className="shadow-sm">
          <Card.Body>
            <Row className="mb-3">
              <Col md={4}>
                <h5>T·ªïng ƒë∆°n h√†ng: {orders.length}</h5>
              </Col>
            </Row>

            <Table
              striped
              bordered
              hover
              responsive
              className="align-middle text-center"
            >
              <thead className="table-light">
                <tr>
                  <th>M√£ ƒë∆°n</th>
                  <th className="text-start">Kh√°ch h√†ng</th>
                  <th>Ng√†y ƒë·∫∑t</th>
                  <th>T·ªïng ti·ªÅn</th>
                  <th>Tr·∫°ng th√°i</th>
                  <th>S·∫£n ph·∫©m</th>
                  <th>H√†nh ƒë·ªông</th>
                </tr>
              </thead>
              <tbody>
                {orders.length === 0 && (
                  <tr>
                    <td colSpan="7" className="text-center text-muted py-4">
                      Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o.
                    </td>
                  </tr>
                )}
                {orders.map((order) => (
                  <tr key={order.id}>
                    <td>{`DH${order.id}`}</td>
                    <td className="text-start">{order.user?.username}</td>
                    <td>{formatDate(order.createdAt)}</td>
                    <td>{formatCurrency(order.totalPrice)}</td>
                    <td>{getStatusBadge(order.status)}</td>
                    <td className="text-start">
                      {order.orderItems
                        ?.filter((item) => item.returnStatus !== "none")
                        .map((item) => (
                          <div key={item.id} className="mb-1">
                            <div>
                              <strong>Tr·∫°ng th√°i tr·∫£ h√†ng : </strong> {""}
                              {getReturnBadge(item.returnStatus)}
                            </div>
                            <div>
                              <strong>T√™n s·∫£n ph·∫©m:</strong>
                              {""} {item.productName}
                            </div>{" "}
                            <span>
                              <strong>S·ªë l∆∞·ª£ng: {item.quantity}</strong>
                            </span>
                            <div
                              style={{
                                whiteSpace: "nowrap",
                                overflow: "hidden",
                                textOverflow: "ellipsis",
                                maxWidth: "200px",
                              }}
                              title={item.returnReason}
                            >
                              <strong>L√Ω do tr·∫£:</strong> {item.returnReason}
                            </div>
                          </div>
                        ))}
                    </td>
                    <td>
                      <div className="d-flex justify-content-center flex-wrap gap-1">
                        <Dropdown>
                          <Dropdown.Toggle variant="outline-primary" size="sm">
                            C·∫≠p nh·∫≠t
                          </Dropdown.Toggle>
                          <Dropdown.Menu>
                            {Object.keys(statusMap).map((key) => (
                              <Dropdown.Item
                                key={key}
                                onClick={() =>
                                  handleUpdateStatus(order.id, key)
                                }
                                className={
                                  key === "cancelled" ? "text-danger" : ""
                                }
                              >
                                {statusMap[key].label}
                              </Dropdown.Item>
                            ))}
                          </Dropdown.Menu>
                        </Dropdown>

                        <Button
                          variant="outline-secondary"
                          size="sm"
                          onClick={() => navigate(`/orders-detail/${order.id}`)}
                        >
                          Chi ti·∫øt
                        </Button>

                        {order.status === "shipped" && (
                          <Button
                            size="sm"
                            variant="success"
                            onClick={() => handleReceiveOrder(order.id)}
                          >
                            Nh·∫≠n h√†ng
                          </Button>
                        )}

                        {order.status === "pending" && (
                          <Button
                            size="sm"
                            variant="danger"
                            onClick={() =>
                              handleUpdateStatus(order.id, "cancelled")
                            }
                          >
                            H·ªßy ƒë∆°n
                          </Button>
                        )}

                        {order.orderItems?.some(
                          (item) => item.returnStatus === "requested"
                        ) && (
                          <Button
                            size="sm"
                            variant="danger"
                            onClick={() =>
                              navigate(`/admin/orders-return/${order.id}`)
                            }
                          >
                            Qu·∫£n l√Ω tr·∫£ h√†ng
                          </Button>
                        )}
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </Table>
          </Card.Body>
        </Card>
      </div>
    </>
  );
};

export default OrderManage;
